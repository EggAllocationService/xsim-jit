loadi Stack, r15
call count_primes
loadi 1, r1
call printnum
.literal 0


count_primes:
    mov r0, r4 # store should_print
    loadi 0xFFFF, r6 # max number
    loadi 5, r0 # starting number
    loadi 0, r12
find_loop:
    push r0
    call is_prime
    loadi 0, r1
    equ r0, r1 # r0 was not prime
    pop r0
    br no_add
    inc r12
no_add:
    inc r0
    equ r0, r6
    br find_ret
    jr find_loop

find_ret:
    mov r12, r0
    inc r0
    ret



# isprime(r0) - transforms r0 to 1 if r0 was prime, 0 if not
is_prime:
    # store (n / 2) + 2 in r5
    mov r0, r5
    loadi 2, r1
    div r1, r5
    add r1, r5

    # start at 5
    loadi 5, r1
    loadi 0, r3 # comparison value
ip_start:
    push r0
    call mod
    equ r0, r3
    br ip_false
    cmp r5, r1
    br ip_true
    inc r1
    pop r0
    jr ip_start
ip_false:
    loadi 0, r0
    jr ip_ret
ip_true:
    loadi 1, r0
ip_ret:
    pop r1
    ret
.literal 0

mod:
  mov r0, r10
  div r1, r10
  mul r1, r10
  sub r10, r0
  ret



#printnum(num, newline) - prints a number in decimal representation
printnum:
  mov r1, r2
  mov r0, r11
  loadi 255, r0
  push r0
push_factor:
  mov r11, r0
  loadi 10, r1
  call mod
  push r0
  div r1, r11
  loadi 0, r0
  equ r0, r11 # test if value == 0
  br print_nums
  jr push_factor
print_nums:
  loadi 48, r1
  loadi 255, r8
print_loop:
  pop r0
  equ r0, r8 # test if popped value is 255
  br print_newline # if popped value is 255, stop printing
  add r1, r0
  out r0
  jr print_loop
print_newline:
  loadi 0, r10
  equ r2, r10 # if newline parameter is zero
  br printnum_done
  loadi 10, r0
  out r0
printnum_done:
  ret

.words 1024
Stack: